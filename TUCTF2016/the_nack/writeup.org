#+TITLE: Writeup - The Nack
#+AUTHOR: Paweł Lasek

* Description of task

"Mysterious traffic", or in other words, we have a dump of network traffic
and we're asked to analyze what it says. Provided is a pcap file with the
dump of traffic.


* Solution

This wasn't a particularly hard task if one knows TCP. Short analysis of the
dump in Wireshark showed that the file contains only SYN and NACK packets, as
one side constantly tries to connect to a closed port.

Quick look at a sample of SYN packets showed that each SYN packet had data
associated with it (used to be rare, nowadays more popular method of lowering
latency to first byte). Some quick shell play with tshark gave us the data:

#+begin_src shell
tshark -r ce6e1a612a1da91648306ace0cf7151e6531abc9.pcapng \
 -Y 'tcp.connection.syn' -T fields -e data
#+end_src

#+begin_example
474f41540147494638
474f41540139614e02
474f415401e100a100
474f41540100ffffff
474f415401000000ff
474f415401ffffffff
474f415401ff21ff0b
474f4154014e455453
474f41540143415045
474f415401322e3003
……………
#+end_example
As we can easily recognize, the first half of the data field is always =47 4F 41
54 01=. However, better to verify that:

#+begin_src shell
tshark -r ce6e1a612a1da91648306ace0cf7151e6531abc9.pcapng \
 -Y 'tcp.connection.syn' -T fields -e data \
 | cut -b -10 | uniq
#+end_src

#+begin_example
474f415401
#+end_example

So, we have found a common "header". Which coincidentally matches the theme of
the CTF, saying "=GOAT\x01=". It's time to extract usable data out.

#+begin_src shell
tshark -r ce6e1a612a1da91648306ace0cf7151e6531abc9.pcapng \
 -Y 'tcp.connection.syn' -T fields -e data \
 | cut -b 11- | tr -d '\n' | xxd -r -p >temp
#+end_src

Some people might have already noticed the first packet starts with what is
essentially beginning of GIF header, something confirmed after looking over the
file with =file= as well image viewer =feh=. The image it shows is the infamous
ROFLCOPTER. Still, no flag… but something blinks in the image.

The obvious thing was to check for data hidden in short-lived frame. Let's
split the gif file into frames:

#+begin_src shell
convert -coalesce temp out%05d.pgm
#+end_src

#+CAPTION: Flag frame
#+NAME: fig:flag
[[./out00016.png]]

In the resulting outXXXX.pgm files, we find in file =out00016.pgm=, we find the
flag: =TUCTF{xxxxxxxxxxxxxxxxxxxxxxxxxxxxx}=
